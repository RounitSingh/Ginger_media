{"ast":null,"code":"// const SignUpValid= (values ) => {\n\n//     let error={}\n//     const email_pattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n//  //   const password_pattern = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9]{8,}$/\n\n//     if(values.name === \"\"){\n//         error.name=\"Name should not be empty \"\n//     }\n//     else {\n//         error.name= \"\"\n//     }\n//     if(values.email === \"\"){\n//         error.email=\"Name should not be empty \"\n//     }\n//     else if (!email_pattern.test(values.email)) {\n//         error.email=\"Email Didn't match \"\n//     }else {\n//         error.email=\"\"\n//     }\n\n//     if(values.password===\"\"){\n//         error.password=\"Password should not be empty \"\n//     }\n//     else if(!password_pattern.test(values.password)) {\n//         error.password= \"Password didn't match\"\n//     }\n//     else {\n//         error.password=\"\"\n//     }\n//     return error;\n\n// }\n\n// export default SignUpValid;\n\nconst SignUpValid = values => {\n  let errors = {};\n  const email_pattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  if (!values.name) {\n    errors.name = \"Name is required.\";\n  }\n  if (!values.email) {\n    errors.email = \"Email is required.\";\n  } else if (!email_pattern.test(values.email)) {\n    errors.email = \"Invalid email format.\";\n  }\n  if (!values.password) {\n    errors.password = \"Password is required.\";\n  }\n  return errors;\n};\n_c = SignUpValid;\nexport default SignUpValid;\nvar _c;\n$RefreshReg$(_c, \"SignUpValid\");","map":{"version":3,"names":["SignUpValid","values","errors","email_pattern","name","email","test","password","_c","$RefreshReg$"],"sources":["E:/react/Xenon/Frontend/src/SignUpValid.js"],"sourcesContent":["\r\n\r\n// const SignUpValid= (values ) => {\r\n\r\n//     let error={}\r\n//     const email_pattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\r\n//  //   const password_pattern = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9]{8,}$/\r\n\r\n\r\n//     if(values.name === \"\"){\r\n//         error.name=\"Name should not be empty \"\r\n//     }\r\n//     else {\r\n//         error.name= \"\"\r\n//     }\r\n//     if(values.email === \"\"){\r\n//         error.email=\"Name should not be empty \"\r\n//     }\r\n//     else if (!email_pattern.test(values.email)) {\r\n//         error.email=\"Email Didn't match \"\r\n//     }else {\r\n//         error.email=\"\"\r\n//     }\r\n\r\n//     if(values.password===\"\"){\r\n//         error.password=\"Password should not be empty \"\r\n//     }\r\n//     else if(!password_pattern.test(values.password)) {\r\n//         error.password= \"Password didn't match\"\r\n//     }\r\n//     else {\r\n//         error.password=\"\"\r\n//     }\r\n//     return error;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\n// }\r\n\r\n// export default SignUpValid;\r\n\r\nconst SignUpValid = (values) => {\r\n    let errors = {};\r\n\r\n    const email_pattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n\r\n    if (!values.name) {\r\n        errors.name = \"Name is required.\";\r\n    }\r\n\r\n    if (!values.email) {\r\n        errors.email = \"Email is required.\";\r\n    } else if (!email_pattern.test(values.email)) {\r\n        errors.email = \"Invalid email format.\";\r\n    }\r\n\r\n    if (!values.password) {\r\n        errors.password = \"Password is required.\";\r\n    }\r\n\r\n    return errors;\r\n};\r\n\r\nexport default SignUpValid;\r\n"],"mappings":"AAEA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AASA;;AAEA;;AAEA,MAAMA,WAAW,GAAIC,MAAM,IAAK;EAC5B,IAAIC,MAAM,GAAG,CAAC,CAAC;EAEf,MAAMC,aAAa,GAAG,4BAA4B;EAElD,IAAI,CAACF,MAAM,CAACG,IAAI,EAAE;IACdF,MAAM,CAACE,IAAI,GAAG,mBAAmB;EACrC;EAEA,IAAI,CAACH,MAAM,CAACI,KAAK,EAAE;IACfH,MAAM,CAACG,KAAK,GAAG,oBAAoB;EACvC,CAAC,MAAM,IAAI,CAACF,aAAa,CAACG,IAAI,CAACL,MAAM,CAACI,KAAK,CAAC,EAAE;IAC1CH,MAAM,CAACG,KAAK,GAAG,uBAAuB;EAC1C;EAEA,IAAI,CAACJ,MAAM,CAACM,QAAQ,EAAE;IAClBL,MAAM,CAACK,QAAQ,GAAG,uBAAuB;EAC7C;EAEA,OAAOL,MAAM;AACjB,CAAC;AAACM,EAAA,GApBIR,WAAW;AAsBjB,eAAeA,WAAW;AAAC,IAAAQ,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}