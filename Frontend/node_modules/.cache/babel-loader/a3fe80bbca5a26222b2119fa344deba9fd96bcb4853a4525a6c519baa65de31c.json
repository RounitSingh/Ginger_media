{"ast":null,"code":"// // import React from 'react'\n\n// const LoginValid = (values ) => {\n\n//     let error={}\n//     const email_pattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n//     const password_pattern = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9]{8,}$/\n\n//     if(values.email === \"\"){\n//         error.email=\"Name should not be empty \"\n//     }\n//     else if (!email_pattern.test(values.email)) {\n//         error.email=\"Email Didn't match \"\n//     }else {\n//         error.email=\"\"\n//     }\n\n//     if(values.password===\"\"){\n//         error.password=\"Password should not be empty \"\n//     }\n//     else if(!password_pattern.test(values.password)) {\n//         error.password= \"Password didn't match\"\n//     }\n//     else {\n//         error.password=\"\"\n//     }\n//     return error;\n\n// }\n\n// export default LoginValid;\n\nconst LoginValid = values => {\n  let error = {};\n  const email_pattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  if (values.email === \"\") {\n    error.email = \"Email should not be empty\";\n  } else if (!email_pattern.test(values.email)) {\n    error.email = \"Invalid email format\";\n  } else {\n    error.email = \"\";\n  }\n  if (values.password === \"\") {\n    error.password = \"Password should not be empty\";\n  } else {\n    error.password = \"\";\n  }\n  return error;\n};\n_c = LoginValid;\nexport default LoginValid;\nvar _c;\n$RefreshReg$(_c, \"LoginValid\");","map":{"version":3,"names":["LoginValid","values","error","email_pattern","email","test","password","_c","$RefreshReg$"],"sources":["E:/react/Xenon/Frontend/src/LoginValid.js"],"sourcesContent":["// // import React from 'react'\r\n\r\n// const LoginValid = (values ) => {\r\n\r\n//     let error={}\r\n//     const email_pattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\r\n//     const password_pattern = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9]{8,}$/\r\n\r\n//     if(values.email === \"\"){\r\n//         error.email=\"Name should not be empty \"\r\n//     }\r\n//     else if (!email_pattern.test(values.email)) {\r\n//         error.email=\"Email Didn't match \"\r\n//     }else {\r\n//         error.email=\"\"\r\n//     }\r\n\r\n//     if(values.password===\"\"){\r\n//         error.password=\"Password should not be empty \"\r\n//     }\r\n//     else if(!password_pattern.test(values.password)) {\r\n//         error.password= \"Password didn't match\"\r\n//     }\r\n//     else {\r\n//         error.password=\"\"\r\n//     }\r\n//     return error;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\n// }\r\n\r\n// export default LoginValid;\r\n\r\nconst LoginValid = (values) => {\r\n    let error = {};\r\n    const email_pattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n\r\n    if (values.email === \"\") {\r\n        error.email = \"Email should not be empty\";\r\n    } else if (!email_pattern.test(values.email)) {\r\n        error.email = \"Invalid email format\";\r\n    } else {\r\n        error.email = \"\";\r\n    }\r\n\r\n    if (values.password === \"\") {\r\n        error.password = \"Password should not be empty\";\r\n    } else {\r\n        error.password = \"\";\r\n    }\r\n\r\n    return error;\r\n}\r\n\r\nexport default LoginValid;\r\n"],"mappings":"AAAA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AASA;;AAEA;;AAEA,MAAMA,UAAU,GAAIC,MAAM,IAAK;EAC3B,IAAIC,KAAK,GAAG,CAAC,CAAC;EACd,MAAMC,aAAa,GAAG,4BAA4B;EAElD,IAAIF,MAAM,CAACG,KAAK,KAAK,EAAE,EAAE;IACrBF,KAAK,CAACE,KAAK,GAAG,2BAA2B;EAC7C,CAAC,MAAM,IAAI,CAACD,aAAa,CAACE,IAAI,CAACJ,MAAM,CAACG,KAAK,CAAC,EAAE;IAC1CF,KAAK,CAACE,KAAK,GAAG,sBAAsB;EACxC,CAAC,MAAM;IACHF,KAAK,CAACE,KAAK,GAAG,EAAE;EACpB;EAEA,IAAIH,MAAM,CAACK,QAAQ,KAAK,EAAE,EAAE;IACxBJ,KAAK,CAACI,QAAQ,GAAG,8BAA8B;EACnD,CAAC,MAAM;IACHJ,KAAK,CAACI,QAAQ,GAAG,EAAE;EACvB;EAEA,OAAOJ,KAAK;AAChB,CAAC;AAAAK,EAAA,GAnBKP,UAAU;AAqBhB,eAAeA,UAAU;AAAC,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}